"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2024-01-01 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create user_sessions table
    op.create_table('user_sessions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=False),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('health_profile', sa.JSON(), nullable=True),
    sa.Column('vehicle_type', sa.String(length=20), nullable=True),
    sa.Column('total_trips', sa.Integer(), nullable=True),
    sa.Column('total_eco_score', sa.Integer(), nullable=True),
    sa.Column('last_active', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    op.create_index(op.f('ix_user_sessions_session_id'), 'user_sessions', ['session_id'], unique=False)
    
    # Create traffic_signals table
    op.create_table('traffic_signals',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('signal_id', sa.String(length=50), nullable=False),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=False),
    sa.Column('cycle_time_seconds', sa.Integer(), nullable=False),
    sa.Column('green_duration', sa.Integer(), nullable=False),
    sa.Column('red_duration', sa.Integer(), nullable=False),
    sa.Column('yellow_duration', sa.Integer(), nullable=True),
    sa.Column('current_state', sa.String(length=10), nullable=True),
    sa.Column('last_state_change', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_coordinated', sa.Boolean(), nullable=True),
    sa.Column('corridor_id', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('signal_id')
    )
    op.create_index(op.f('ix_traffic_signals_signal_id'), 'traffic_signals', ['signal_id'], unique=False)
    
    # Create routes table
    op.create_table('routes',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('start_lat', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('start_lng', sa.Numeric(precision=11, scale=8), nullable=False),
    sa.Column('end_lat', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('end_lng', sa.Numeric(precision=11, scale=8), nullable=False),
    sa.Column('waypoints', sa.String(), nullable=True),
    sa.Column('distance_km', sa.Numeric(precision=8, scale=3), nullable=False),
    sa.Column('estimated_time_minutes', sa.Integer(), nullable=False),
    sa.Column('average_aqi', sa.Integer(), nullable=True),
    sa.Column('route_score', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('route_type', sa.String(length=20), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create aqi_readings table
    op.create_table('aqi_readings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=False),
    sa.Column('aqi_value', sa.Integer(), nullable=False),
    sa.Column('pm25', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('pm10', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('no2', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('o3', sa.Numeric(precision=6, scale=2), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=True),
    sa.Column('reading_time', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create emergency_alerts table
    op.create_table('emergency_alerts',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=False),
    sa.Column('radius_km', sa.Numeric(precision=6, scale=2), nullable=False),
    sa.Column('severity', sa.Integer(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.String(length=100), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create trip_metrics table
    op.create_table('trip_metrics',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('trip_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('route_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('actual_travel_time', sa.Integer(), nullable=True),
    sa.Column('time_saved_seconds', sa.Integer(), nullable=True),
    sa.Column('fuel_saved_liters', sa.Numeric(precision=6, scale=3), nullable=True),
    sa.Column('co2_avoided_kg', sa.Numeric(precision=6, scale=3), nullable=True),
    sa.Column('pollution_exposure_avoided', sa.Numeric(precision=6, scale=3), nullable=True),
    sa.Column('eco_score', sa.Integer(), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ),
    sa.ForeignKeyConstraint(['user_session_id'], ['user_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('trip_id')
    )
    
    # Create user_achievements table
    op.create_table('user_achievements',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_session_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('achievement_type', sa.String(length=50), nullable=False),
    sa.Column('points_earned', sa.Integer(), nullable=False),
    sa.Column('milestone_reached', sa.String(length=100), nullable=True),
    sa.Column('earned_at', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_session_id'], ['user_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_achievements')
    op.drop_table('trip_metrics')
    op.drop_table('emergency_alerts')
    op.drop_table('aqi_readings')
    op.drop_table('routes')
    op.drop_index(op.f('ix_traffic_signals_signal_id'), table_name='traffic_signals')
    op.drop_table('traffic_signals')
    op.drop_index(op.f('ix_user_sessions_session_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    # ### end Alembic commands ###